
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;
import AST.*;
import AST.BinaryExpr.*;
import AST.Expr.ExprCallProc;
import AST.Functions.CallProcOp;
import AST.Const.*;
import AST.Expr.ExprNode;
import AST.Expr.IdNode;
import AST.Functions.ProcBodyOp;
import AST.Functions.ProcOp;
import AST.Stat.*;
import AST.Type.*;
import AST.UnaryExpr.MinusOp;
import AST.UnaryExpr.NotOp;
import java_cup.runtime.*;
import java.util.LinkedList;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\123\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\014\004\000\002\014\003\000\002\004\003" +
    "\000\002\004\004\000\002\015\005\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\016\003\000\002\016\005\000\002\016\005\000\002\016" +
    "\007\000\002\005\017\000\002\005\016\000\002\005\016" +
    "\000\002\005\015\000\002\005\016\000\002\005\015\000" +
    "\002\005\015\000\002\005\014\000\002\011\003\000\002" +
    "\011\005\000\002\010\003\000\002\010\002\000\002\032" +
    "\005\000\002\032\004\000\002\006\003\000\002\006\005" +
    "\000\002\007\004\000\002\030\003\000\002\030\005\000" +
    "\002\012\003\000\002\012\003\000\002\025\003\000\002" +
    "\025\004\000\002\013\003\000\002\013\004\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\004" +
    "\000\002\013\004\000\002\026\011\000\002\026\010\000" +
    "\002\024\004\000\002\024\003\000\002\023\006\000\002" +
    "\022\004\000\002\022\002\000\002\017\011\000\002\017" +
    "\007\000\002\003\013\000\002\020\006\000\002\021\006" +
    "\000\002\027\005\000\002\033\006\000\002\033\005\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\005\000" +
    "\002\034\005\000\002\034\005\000\002\034\005\000\002" +
    "\034\005\000\002\034\005\000\002\034\004\000\002\034" +
    "\004\000\002\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\014\004\013\014\005\015\010\016\016\017" +
    "\012\001\002\000\004\010\275\001\002\000\010\010\ufff9" +
    "\011\ufff9\013\ufff9\001\002\000\004\002\274\001\002\000" +
    "\004\004\013\001\002\000\010\010\ufff6\011\ufff6\013\ufff6" +
    "\001\002\000\032\004\ufffd\010\ufffd\014\005\015\010\016" +
    "\016\017\012\021\ufffd\024\ufffd\031\ufffd\032\ufffd\055\ufffd" +
    "\057\ufffd\001\002\000\010\010\ufff7\011\ufff7\013\ufff7\001" +
    "\002\000\004\010\020\001\002\000\004\002\uffff\001\002" +
    "\000\006\002\ufffc\004\013\001\002\000\010\010\ufff8\011" +
    "\ufff8\013\ufff8\001\002\000\004\002\ufffb\001\002\000\004" +
    "\006\021\001\002\000\014\007\024\014\005\015\010\016" +
    "\016\017\012\001\002\000\004\010\136\001\002\000\006" +
    "\007\242\012\241\001\002\000\014\014\005\015\010\016" +
    "\016\017\012\035\031\001\002\000\006\007\uffe3\012\uffe3" +
    "\001\002\000\006\011\uffde\013\uffde\001\002\000\004\011" +
    "\034\001\002\000\006\011\uffe9\013\032\001\002\000\006" +
    "\011\uffdd\013\uffdd\001\002\000\014\014\005\015\010\016" +
    "\016\017\012\035\031\001\002\000\004\011\uffe8\001\002" +
    "\000\030\010\047\014\005\015\010\016\016\017\012\021" +
    "\041\024\045\031\035\032\046\055\044\057\056\001\002" +
    "\000\004\006\236\001\002\000\032\010\047\012\uffdc\021" +
    "\041\023\uffdc\024\045\025\uffdc\027\uffdc\030\uffdc\031\035" +
    "\032\046\055\uffdc\057\056\001\002\000\004\012\234\001" +
    "\002\000\032\010\uffda\012\uffda\021\uffda\023\uffda\024\uffda" +
    "\025\uffda\027\uffda\030\uffda\031\uffda\032\uffda\055\uffda\057" +
    "\uffda\001\002\000\036\010\222\021\041\024\045\031\035" +
    "\032\046\033\067\034\071\036\066\040\061\053\073\054" +
    "\070\057\056\060\063\061\062\001\002\000\004\012\217" +
    "\001\002\000\004\012\216\001\002\000\024\010\072\033" +
    "\067\034\071\036\066\040\061\053\073\054\070\060\063" +
    "\061\062\001\002\000\024\010\072\033\067\034\071\036" +
    "\066\040\061\053\073\054\070\060\063\061\062\001\002" +
    "\000\004\006\170\001\002\000\010\006\125\013\uffe0\020" +
    "\uffe0\001\002\000\004\055\164\001\002\000\020\010\047" +
    "\021\041\024\045\031\035\032\046\055\154\057\056\001" +
    "\002\000\006\013\147\020\150\001\002\000\004\012\146" +
    "\001\002\000\004\012\145\001\002\000\004\012\144\001" +
    "\002\000\004\006\057\001\002\000\012\014\005\015\010" +
    "\016\016\017\012\001\002\000\024\010\072\033\067\034" +
    "\071\036\066\040\061\053\073\054\070\060\063\061\062" +
    "\001\002\000\024\010\072\033\067\034\071\036\066\040" +
    "\061\053\073\054\070\060\063\061\062\001\002\000\042" +
    "\012\uffc0\013\uffc0\022\uffc0\026\uffc0\037\uffc0\040\uffc0\041" +
    "\uffc0\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0" +
    "\050\uffc0\051\uffc0\052\uffc0\001\002\000\042\012\uffc1\013" +
    "\uffc1\022\uffc1\026\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1" +
    "\043\uffc1\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\001\002\000\034\012\135\037\100\040\075" +
    "\041\105\042\103\043\076\044\110\045\104\046\077\047" +
    "\107\050\102\051\101\052\106\001\002\000\042\012\uffaf" +
    "\013\uffaf\022\uffaf\026\uffaf\037\uffaf\040\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\052\uffaf\001\002\000\042\012\uffbf\013\uffbf\022" +
    "\uffbf\026\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\047\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\001\002\000\042\012\uffc3\013\uffc3\022\uffc3\026\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\001\002" +
    "\000\042\012\uffc4\013\uffc4\022\uffc4\026\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\001\002\000\042\012" +
    "\uffc2\013\uffc2\022\uffc2\026\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\001\002\000\044\006\125\012\uffb0" +
    "\013\uffb0\022\uffb0\026\uffb0\037\uffb0\040\uffb0\041\uffb0\042" +
    "\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\001\002\000\024\010\072\033\067\034" +
    "\071\036\066\040\061\053\073\054\070\060\063\061\062" +
    "\001\002\000\042\012\uffb1\013\uffb1\022\uffb1\026\uffb1\037" +
    "\uffb1\040\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\052\uffb1\001\002\000" +
    "\024\010\072\033\067\034\071\036\066\040\061\053\073" +
    "\054\070\060\063\061\062\001\002\000\024\010\072\033" +
    "\067\034\071\036\066\040\061\053\073\054\070\060\063" +
    "\061\062\001\002\000\024\010\072\033\067\034\071\036" +
    "\066\040\061\053\073\054\070\060\063\061\062\001\002" +
    "\000\024\010\072\033\067\034\071\036\066\040\061\053" +
    "\073\054\070\060\063\061\062\001\002\000\024\010\072" +
    "\033\067\034\071\036\066\040\061\053\073\054\070\060" +
    "\063\061\062\001\002\000\024\010\072\033\067\034\071" +
    "\036\066\040\061\053\073\054\070\060\063\061\062\001" +
    "\002\000\024\010\072\033\067\034\071\036\066\040\061" +
    "\053\073\054\070\060\063\061\062\001\002\000\024\010" +
    "\072\033\067\034\071\036\066\040\061\053\073\054\070" +
    "\060\063\061\062\001\002\000\024\010\072\033\067\034" +
    "\071\036\066\040\061\053\073\054\070\060\063\061\062" +
    "\001\002\000\024\010\072\033\067\034\071\036\066\040" +
    "\061\053\073\054\070\060\063\061\062\001\002\000\024" +
    "\010\072\033\067\034\071\036\066\040\061\053\073\054" +
    "\070\060\063\061\062\001\002\000\024\010\072\033\067" +
    "\034\071\036\066\040\061\053\073\054\070\060\063\061" +
    "\062\001\002\000\042\012\uffb9\013\uffb9\022\uffb9\026\uffb9" +
    "\037\uffb9\040\uffb9\041\105\042\103\043\076\044\uffb9\045" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\001\002" +
    "\000\026\012\uffb6\013\uffb6\022\uffb6\026\uffb6\037\100\040" +
    "\075\041\105\042\103\043\076\044\110\001\002\000\026" +
    "\012\uffb3\013\uffb3\022\uffb3\026\uffb3\037\100\040\075\041" +
    "\105\042\103\043\076\044\110\001\002\000\042\012\uffbc" +
    "\013\uffbc\022\uffbc\026\uffbc\037\uffbc\040\uffbc\041\uffbc\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc" +
    "\051\uffbc\052\uffbc\001\002\000\026\012\uffb8\013\uffb8\022" +
    "\uffb8\026\uffb8\037\100\040\075\041\105\042\103\043\076" +
    "\044\110\001\002\000\042\012\uffbb\013\uffbb\022\uffbb\026" +
    "\uffbb\037\uffbb\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb\001" +
    "\002\000\026\012\uffb5\013\uffb5\022\uffb5\026\uffb5\037\100" +
    "\040\075\041\105\042\103\043\076\044\110\001\002\000" +
    "\026\012\uffb4\013\uffb4\022\uffb4\026\uffb4\037\100\040\075" +
    "\041\105\042\103\043\076\044\110\001\002\000\042\012" +
    "\uffbe\013\uffbe\022\uffbe\026\uffbe\037\uffbe\040\uffbe\041\105" +
    "\042\103\043\076\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\001\002\000\026\012\uffb7\013\uffb7" +
    "\022\uffb7\026\uffb7\037\100\040\075\041\105\042\103\043" +
    "\076\044\110\001\002\000\042\012\uffba\013\uffba\022\uffba" +
    "\026\uffba\037\uffba\040\uffba\041\uffba\042\uffba\043\uffba\044" +
    "\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\052\uffba" +
    "\001\002\000\042\012\uffbd\013\uffbd\022\uffbd\026\uffbd\037" +
    "\uffbd\040\uffbd\041\105\042\103\043\076\044\uffbd\045\uffbd" +
    "\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\001\002\000" +
    "\026\007\130\010\072\033\067\034\071\036\066\040\061" +
    "\053\073\054\070\060\063\061\062\001\002\000\036\012" +
    "\132\013\133\037\100\040\075\041\105\042\103\043\076" +
    "\044\110\045\104\046\077\047\107\050\102\051\101\052" +
    "\106\001\002\000\004\007\131\001\002\000\042\012\uffc5" +
    "\013\uffc5\022\uffc5\026\uffc5\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\050\uffc5" +
    "\051\uffc5\052\uffc5\001\002\000\042\012\uffc6\013\uffc6\022" +
    "\uffc6\026\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\001\002\000\036\005\uffe4\007\uffe4\010\uffe4\012\uffe4" +
    "\021\uffe4\023\uffe4\024\uffe4\025\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\055\uffe4\057\uffe4\001\002\000\024\010\072" +
    "\033\067\034\071\036\066\040\061\053\073\054\070\060" +
    "\063\061\062\001\002\000\036\005\uffe5\007\uffe5\010\uffe5" +
    "\012\uffe5\021\uffe5\023\uffe5\024\uffe5\025\uffe5\027\uffe5\030" +
    "\uffe5\031\uffe5\032\uffe5\055\uffe5\057\uffe5\001\002\000\004" +
    "\010\136\001\002\000\012\007\uffe0\012\uffe0\013\uffe0\020" +
    "\uffe0\001\002\000\004\007\140\001\002\000\012\014\005" +
    "\015\010\016\016\017\012\001\002\000\016\010\047\021" +
    "\041\024\045\031\035\032\046\057\056\001\002\000\004" +
    "\012\uffca\001\002\000\042\012\uffb2\013\uffb2\022\uffb2\026" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\045\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\001" +
    "\002\000\032\010\uffd9\012\uffd9\021\uffd9\023\uffd9\024\uffd9" +
    "\025\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\055\uffd9\057" +
    "\uffd9\001\002\000\032\010\uffd6\012\uffd6\021\uffd6\023\uffd6" +
    "\024\uffd6\025\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\055" +
    "\uffd6\057\uffd6\001\002\000\032\010\uffd8\012\uffd8\021\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\027\uffd8\030\uffd8\031\uffd8\032" +
    "\uffd8\055\uffd8\057\uffd8\001\002\000\004\010\152\001\002" +
    "\000\024\010\072\033\067\034\071\036\066\040\061\053" +
    "\073\054\070\060\063\061\062\001\002\000\034\007\uffc7" +
    "\010\uffc7\012\uffc7\021\uffc7\023\uffc7\024\uffc7\025\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\032\uffc7\055\uffc7\057\uffc7\001\002" +
    "\000\012\007\uffdf\012\uffdf\013\uffdf\020\uffdf\001\002\000" +
    "\004\055\160\001\002\000\024\010\072\033\067\034\071" +
    "\036\066\040\061\053\073\054\070\060\063\061\062\001" +
    "\002\000\004\005\156\001\002\000\004\012\157\001\002" +
    "\000\006\002\uffee\004\uffee\001\002\000\024\010\072\033" +
    "\067\034\071\036\066\040\061\053\073\054\070\060\063" +
    "\061\062\001\002\000\004\005\162\001\002\000\004\012" +
    "\163\001\002\000\006\002\uffef\004\uffef\001\002\000\024" +
    "\010\072\033\067\034\071\036\066\040\061\053\073\054" +
    "\070\060\063\061\062\001\002\000\004\005\166\001\002" +
    "\000\004\012\167\001\002\000\006\002\uffeb\004\uffeb\001" +
    "\002\000\024\010\072\033\067\034\071\036\066\040\061" +
    "\053\073\054\070\060\063\061\062\001\002\000\004\007" +
    "\172\001\002\000\004\012\uffc8\001\002\000\034\026\174" +
    "\037\100\040\075\041\105\042\103\043\076\044\110\045" +
    "\104\046\077\047\107\050\102\051\101\052\106\001\002" +
    "\000\016\010\047\021\041\024\045\031\035\032\046\057" +
    "\056\001\002\000\010\025\uffcd\027\200\030\177\001\002" +
    "\000\006\025\uffcd\030\177\001\002\000\016\010\047\021" +
    "\041\024\045\031\035\032\046\057\056\001\002\000\024" +
    "\010\072\033\067\034\071\036\066\040\061\053\073\054" +
    "\070\060\063\061\062\001\002\000\004\025\204\001\002" +
    "\000\010\025\uffd0\027\200\030\uffd0\001\002\000\006\025" +
    "\uffd1\030\uffd1\001\002\000\004\012\uffd2\001\002\000\034" +
    "\026\206\037\100\040\075\041\105\042\103\043\076\044" +
    "\110\045\104\046\077\047\107\050\102\051\101\052\106" +
    "\001\002\000\016\010\047\021\041\024\045\031\035\032" +
    "\046\057\056\001\002\000\010\025\uffcf\027\uffcf\030\uffcf" +
    "\001\002\000\004\025\uffce\001\002\000\004\025\212\001" +
    "\002\000\004\012\uffd3\001\002\000\004\005\214\001\002" +
    "\000\004\012\215\001\002\000\006\002\uffea\004\uffea\001" +
    "\002\000\032\010\uffd7\012\uffd7\021\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\055\uffd7\057" +
    "\uffd7\001\002\000\032\010\uffd5\012\uffd5\021\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\055" +
    "\uffd5\057\uffd5\001\002\000\036\012\217\022\uffaf\037\uffaf" +
    "\040\uffaf\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046" +
    "\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\001\002\000\034" +
    "\022\231\037\100\040\075\041\105\042\103\043\076\044" +
    "\110\045\104\046\077\047\107\050\102\051\101\052\106" +
    "\001\002\000\042\006\125\013\uffe0\020\uffe0\022\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\001\002\000" +
    "\004\055\224\001\002\000\024\010\072\033\067\034\071" +
    "\036\066\040\061\053\073\054\070\060\063\061\062\001" +
    "\002\000\034\022\226\037\100\040\075\041\105\042\103" +
    "\043\076\044\110\045\104\046\077\047\107\050\102\051" +
    "\101\052\106\001\002\000\016\010\047\021\041\024\045" +
    "\031\035\032\046\057\056\001\002\000\004\023\230\001" +
    "\002\000\004\012\uffcc\001\002\000\016\010\047\021\041" +
    "\024\045\031\035\032\046\057\056\001\002\000\004\023" +
    "\233\001\002\000\004\012\uffcb\001\002\000\032\010\uffd4" +
    "\012\uffd4\021\uffd4\023\uffd4\024\uffd4\025\uffd4\027\uffd4\030" +
    "\uffd4\031\uffd4\032\uffd4\055\uffd4\057\uffd4\001\002\000\016" +
    "\012\uffdb\023\uffdb\025\uffdb\027\uffdb\030\uffdb\055\uffdb\001" +
    "\002\000\004\010\136\001\002\000\006\007\240\013\147" +
    "\001\002\000\004\012\uffc9\001\002\000\012\014\005\015" +
    "\010\016\016\017\012\001\002\000\014\014\005\015\010" +
    "\016\016\017\012\035\031\001\002\000\004\011\244\001" +
    "\002\000\030\010\047\014\005\015\010\016\016\017\012" +
    "\021\041\024\045\031\035\032\046\055\245\057\056\001" +
    "\002\000\024\010\072\033\067\034\071\036\066\040\061" +
    "\053\073\054\070\060\063\061\062\001\002\000\004\055" +
    "\261\001\002\000\020\010\047\021\041\024\045\031\035" +
    "\032\046\055\251\057\056\001\002\000\004\055\255\001" +
    "\002\000\024\010\072\033\067\034\071\036\066\040\061" +
    "\053\073\054\070\060\063\061\062\001\002\000\004\005" +
    "\253\001\002\000\004\012\254\001\002\000\006\002\ufff0" +
    "\004\ufff0\001\002\000\024\010\072\033\067\034\071\036" +
    "\066\040\061\053\073\054\070\060\063\061\062\001\002" +
    "\000\004\005\257\001\002\000\004\012\260\001\002\000" +
    "\006\002\ufff1\004\ufff1\001\002\000\024\010\072\033\067" +
    "\034\071\036\066\040\061\053\073\054\070\060\063\061" +
    "\062\001\002\000\004\005\263\001\002\000\004\012\264" +
    "\001\002\000\006\002\uffed\004\uffed\001\002\000\004\005" +
    "\266\001\002\000\004\012\267\001\002\000\006\002\uffec" +
    "\004\uffec\001\002\000\006\007\uffe2\012\uffe2\001\002\000" +
    "\010\007\uffe1\012\uffe1\013\147\001\002\000\022\004\ufffe" +
    "\010\ufffe\021\ufffe\024\ufffe\031\ufffe\032\ufffe\055\ufffe\057" +
    "\ufffe\001\002\000\004\002\001\001\002\000\004\002\000" +
    "\001\002\000\010\012\ufff5\013\ufff5\020\304\001\002\000" +
    "\006\012\300\013\277\001\002\000\004\010\301\001\002" +
    "\000\052\004\ufffa\010\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\021\ufffa\024\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa" +
    "\036\ufffa\040\ufffa\053\ufffa\054\ufffa\055\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\001\002\000\010\012\ufff4\013\ufff4\020\302" +
    "\001\002\000\024\010\072\033\067\034\071\036\066\040" +
    "\061\053\073\054\070\060\063\061\062\001\002\000\036" +
    "\012\ufff2\013\ufff2\037\100\040\075\041\105\042\103\043" +
    "\076\044\110\045\104\046\077\047\107\050\102\051\101" +
    "\052\106\001\002\000\024\010\072\033\067\034\071\036" +
    "\066\040\061\053\073\054\070\060\063\061\062\001\002" +
    "\000\036\012\ufff3\013\ufff3\037\100\040\075\041\105\042" +
    "\103\043\076\044\110\045\104\046\077\047\107\050\102" +
    "\051\101\052\106\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\303\000\016\002\005\004\013\005\014\014\006\015" +
    "\010\031\003\001\001\000\004\016\275\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\272\005\014\001" +
    "\001\000\002\001\001\000\010\014\271\015\010\031\003" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\004\016\005\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\022\007" +
    "\024\031\021\001\001\000\004\030\270\001\001\000\002" +
    "\001\001\000\010\011\026\012\027\031\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\032\012\027\031" +
    "\025\001\001\000\002\001\001\000\034\003\036\013\035" +
    "\014\050\015\010\017\052\020\042\021\053\025\047\026" +
    "\054\027\037\030\051\031\003\033\041\001\001\000\002" +
    "\001\001\000\026\003\036\013\035\017\052\020\042\021" +
    "\053\025\234\026\054\027\037\030\051\033\041\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\036\013" +
    "\035\017\052\020\042\021\053\025\222\026\054\027\037" +
    "\030\051\033\217\034\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\212\033\064\034\125\001\001" +
    "\000\006\033\064\034\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\036\013\035" +
    "\017\052\020\042\021\053\025\152\026\054\027\037\030" +
    "\051\033\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\015\057\031\003\001\001\000\006\033\064\034\063" +
    "\001\001\000\006\033\064\034\142\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\064\034\073" +
    "\001\001\000\002\001\001\000\006\033\064\034\123\001" +
    "\001\000\006\033\064\034\122\001\001\000\006\033\064" +
    "\034\121\001\001\000\006\033\064\034\120\001\001\000" +
    "\006\033\064\034\117\001\001\000\006\033\064\034\116" +
    "\001\001\000\006\033\064\034\115\001\001\000\006\033" +
    "\064\034\114\001\001\000\006\033\064\034\113\001\001" +
    "\000\006\033\064\034\112\001\001\000\006\033\064\034" +
    "\111\001\001\000\006\033\064\034\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\126\033\064" +
    "\034\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\032\133\033\064\034\125\001\001\000\002\001\001\000" +
    "\006\027\136\030\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\140\031\003\001\001\000\026\003" +
    "\036\013\035\017\052\020\042\021\053\025\141\026\054" +
    "\027\037\030\051\033\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\150\033\064\034" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\032\154\033\064\034\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\032\160\033\064\034\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\032\164\033\064" +
    "\034\125\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\170\033\064\034\125\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\036\013\035\017\052\020\042\021\053\025\174" +
    "\026\054\027\037\030\051\033\041\001\001\000\010\022" +
    "\200\023\201\024\175\001\001\000\004\022\210\001\001" +
    "\000\026\003\036\013\035\017\052\020\042\021\053\025" +
    "\207\026\054\027\037\030\051\033\041\001\001\000\006" +
    "\033\064\034\204\001\001\000\002\001\001\000\006\023" +
    "\201\024\202\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\036\013\035\017\052\020" +
    "\042\021\053\025\206\026\054\027\037\030\051\033\041" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\033\064\034\224\001\001\000\002\001" +
    "\001\000\026\003\036\013\035\017\052\020\042\021\053" +
    "\025\226\026\054\027\037\030\051\033\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\036\013\035" +
    "\017\052\020\042\021\053\025\231\026\054\027\037\030" +
    "\051\033\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\030\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\267" +
    "\031\021\001\001\000\010\011\242\012\027\031\025\001" +
    "\001\000\002\001\001\000\034\003\036\013\035\014\246" +
    "\015\010\017\052\020\042\021\053\025\245\026\054\027" +
    "\037\030\051\031\003\033\041\001\001\000\010\032\264" +
    "\033\064\034\125\001\001\000\002\001\001\000\026\003" +
    "\036\013\035\017\052\020\042\021\053\025\247\026\054" +
    "\027\037\030\051\033\041\001\001\000\002\001\001\000" +
    "\010\032\251\033\064\034\125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\255\033" +
    "\064\034\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\032\261\033\064\034\125\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\064\034\302\001\001\000\002\001\001\000" +
    "\006\033\064\034\304\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= VarDeclList ProcList 
            {
              ProgramOp RESULT =null;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<VarDeclOp> vars = (LinkedList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ProcOp> procs = (LinkedList<ProcOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramOp(vars, procs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= ProcList 
            {
              ProgramOp RESULT =null;
		int procsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ProcOp> procs = (LinkedList<ProcOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramOp(null, procs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // VarDeclList ::= VarDecl VarDeclList 
            {
              LinkedList<VarDeclOp> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclOp var = (VarDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<VarDeclOp> vars = (LinkedList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = vars; vars.addFirst(var); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // VarDeclList ::= VarDecl 
            {
              LinkedList<VarDeclOp> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclOp var = (VarDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<VarDeclOp>  l = new LinkedList<VarDeclOp>(); l.addFirst(var); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ProcList ::= Proc 
            {
              LinkedList<ProcOp> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ProcOp p = (ProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ProcOp> l = new LinkedList<ProcOp>(); l.addFirst(p); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ProcList ::= Proc ProcList 
            {
              LinkedList<ProcOp> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProcOp p = (ProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int procsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ProcOp> procs = (LinkedList<ProcOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = procs; procs.addFirst(p); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ProcList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= Type IdListInit SEMI 
            {
              VarDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericType t = (GenericType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IdListInitOp ids = (IdListInitOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclOp(t, ids); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INT 
            {
              GenericType RESULT =null;
		 RESULT = new IntegerType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= FLOAT 
            {
              GenericType RESULT =null;
		 RESULT = new FloatType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= STRING 
            {
              GenericType RESULT =null;
		 RESULT = new StringType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= BOOL 
            {
              GenericType RESULT =null;
		 RESULT = new BoolType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // IdListInit ::= ID 
            {
              IdListInitOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new IdListInitOp(); RESULT.addInitOp(new AssignOp(new IdNode(i)));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdListInit ::= IdListInit COMMA ID 
            {
              IdListInitOp RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		IdListInitOp ids = (IdListInitOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ids.addInitOp(new AssignOp(new IdNode(i))); RESULT = ids;
                                       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdListInit ::= ID ASSIGN Expr 
            {
              IdListInitOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdListInitOp(); RESULT.addInitOp(new AssignOp(new IdNode(i), e));
                                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdListInit ::= IdListInit COMMA ID ASSIGN Expr 
            {
              IdListInitOp RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		IdListInitOp ids = (IdListInitOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ids.addInitOp(new AssignOp(new IdNode(i), e)); RESULT = ids; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdListInit",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList StatList RETURN ExprList CORP SEMI 
            {
              ProcOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int parsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		LinkedList<ParDeclOp> pars = (LinkedList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int resultsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int resultsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<ResultTypeOp> results = (LinkedList<ResultTypeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<VarDeclOp> vars = (LinkedList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<StatNode> stats = (LinkedList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprNode> r_expr = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcOp(new IdNode(i), pars, results, new ProcBodyOp(vars, stats, r_expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON VarDeclList RETURN ExprList CORP SEMI 
            {
              ProcOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int parsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<ParDeclOp> pars = (LinkedList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int resultsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int resultsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<ResultTypeOp> results = (LinkedList<ResultTypeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<VarDeclOp> vars = (LinkedList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprNode> r_expr = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcOp(new IdNode(i), pars, results, new ProcBodyOp(vars, null, r_expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON VarDeclList StatList RETURN ExprList CORP SEMI 
            {
              ProcOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int resultsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int resultsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<ResultTypeOp> results = (LinkedList<ResultTypeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<VarDeclOp> vars = (LinkedList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<StatNode> stats = (LinkedList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprNode> r_expr = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcOp(new IdNode(i), null, results, new ProcBodyOp(vars, stats, r_expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON VarDeclList RETURN ExprList CORP SEMI 
            {
              ProcOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int resultsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int resultsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<ResultTypeOp> results = (LinkedList<ResultTypeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int varsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<VarDeclOp> vars = (LinkedList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprNode> r_expr = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcOp(new IdNode(i), null, results, new ProcBodyOp(vars, null, r_expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON StatList RETURN ExprList CORP SEMI 
            {
              ProcOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int parsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		LinkedList<ParDeclOp> pars = (LinkedList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int resultsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int resultsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<ResultTypeOp> results = (LinkedList<ResultTypeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<StatNode> stats = (LinkedList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprNode> r_expr = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcOp(new IdNode(i), pars, results, new ProcBodyOp(null, stats, r_expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Proc ::= PROC ID LPAR ParamDeclList RPAR ResultTypeList COLON RETURN ExprList CORP SEMI 
            {
              ProcOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int parsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		LinkedList<ParDeclOp> pars = (LinkedList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int resultsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int resultsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<ResultTypeOp> results = (LinkedList<ResultTypeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int r_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprNode> r_expr = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcOp(new IdNode(i), pars, results, new ProcBodyOp(null, null, r_expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON StatList RETURN ExprList CORP SEMI 
            {
              ProcOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int resultsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int resultsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		LinkedList<ResultTypeOp> results = (LinkedList<ResultTypeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LinkedList<StatNode> stats = (LinkedList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int r_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprNode> r_expr = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcOp(new IdNode(i), null, results, new ProcBodyOp(null, stats, r_expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Proc ::= PROC ID LPAR RPAR ResultTypeList COLON RETURN ExprList CORP SEMI 
            {
              ProcOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int resultsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int resultsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<ResultTypeOp> results = (LinkedList<ResultTypeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int r_exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int r_exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ExprNode> r_expr = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ProcOp(new IdNode(i), null, results, new ProcBodyOp(null, null, r_expr)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Proc",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ResultTypeList ::= ResultType 
            {
              LinkedList<ResultTypeOp> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ResultTypeOp r = (ResultTypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ResultTypeOp> l = new LinkedList<ResultTypeOp>(); l.addFirst(r); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ResultTypeList ::= ResultType COMMA ResultTypeList 
            {
              LinkedList<ResultTypeOp> RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ResultTypeOp r = (ResultTypeOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int returnsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int returnsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ResultTypeOp> returns = (LinkedList<ResultTypeOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = returns; returns.addFirst(r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultTypeList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ReturnExprs ::= ExprList 
            {
              ReturnExprsOp RESULT =null;
		int exprsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ExprNode> exprs = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 new ReturnExprsOp(exprs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ReturnExprs ::= 
            {
              ReturnExprsOp RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnExprs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ExprList ::= Expr COMMA ExprList 
            {
              LinkedList<ExprNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ExprNode> es = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = es; es.addFirst(e);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ExprList ::= Expr SEMI 
            {
              LinkedList<ExprNode> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<ExprNode> l = new LinkedList<ExprNode>(); l.addFirst(e); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ParamDeclList ::= ParDecl 
            {
              LinkedList<ParDeclOp> RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOp par = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ParDeclOp> l = new LinkedList<ParDeclOp>(); l.addFirst(par); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParamDeclList ::= ParamDeclList SEMI ParDecl 
            {
              LinkedList<ParDeclOp> RESULT =null;
		int parsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int parsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ParDeclOp> pars = (LinkedList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOp par = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = pars; pars.addFirst(par); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParDecl ::= Type IdList 
            {
              ParDeclOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		GenericType t = (GenericType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<IdNode> ids = (LinkedList<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ParDeclOp(t, ids); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IdList ::= ID 
            {
              LinkedList<IdNode> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<IdNode> l = new LinkedList<IdNode>(); l.addFirst(new IdNode(i)); RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IdList ::= IdList COMMA ID 
            {
              LinkedList<IdNode> RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<IdNode> is = (LinkedList<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = is; is.addFirst(new IdNode(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ResultType ::= Type 
            {
              ResultTypeOp RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		GenericType t = (GenericType)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ResultTypeOp(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ResultType ::= VOID 
            {
              ResultTypeOp RESULT =null;
		 RESULT = new ResultTypeOp("void"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ResultType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StatList ::= Stat 
            {
              LinkedList<StatNode> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatNode stat = (StatNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		LinkedList<StatNode> l = new LinkedList<StatNode>(); l.addFirst(stat); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatList ::= Stat StatList 
            {
              LinkedList<StatNode> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatNode stat = (StatNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<StatNode> stats = (LinkedList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = stats; stats.addFirst(stat); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= AssignStat 
            {
              StatNode RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AssignOp a = (AssignOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = a; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= IfStat SEMI 
            {
              StatNode RESULT =null;
		int if_statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int if_statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IfStatOp if_stat = (IfStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = if_stat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= WhileStat SEMI 
            {
              StatNode RESULT =null;
		int while_statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int while_statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhileOp while_stat = (WhileOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = while_stat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= ReadlnStat SEMI 
            {
              StatNode RESULT =null;
		int read_statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int read_statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReadOp read_stat = (ReadOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = read_stat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= WriteStat SEMI 
            {
              StatNode RESULT =null;
		int write_statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int write_statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WriteOp write_stat = (WriteOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = write_stat; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= CallProc SEMI 
            {
              StatNode RESULT =null;
		int cpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallProcOp cpo = (CallProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = cpo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= For SEMI 
            {
              StatNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ForOp f = (ForOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = f; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IfStat ::= IF Expr THEN StatList ElifList Else FI 
            {
              IfStatOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		LinkedList<StatNode> stats = (LinkedList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<ElifOp> elifs = (LinkedList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElseNode el = (ElseNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStatOp(e, new BodyOp(stats), elifs, el); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IfStat ::= IF Expr THEN StatList Else FI 
            {
              IfStatOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<StatNode> stats = (LinkedList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElseNode el = (ElseNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new IfStatOp(e, new BodyOp(stats), el); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ElifList ::= Elif ElifList 
            {
              LinkedList<ElifOp> RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ElifOp elif = (ElifOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elifsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ElifOp> elifs = (LinkedList<ElifOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = elifs; elifs.addFirst(elif);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElifList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ElifList ::= Elif 
            {
              LinkedList<ElifOp> RESULT =null;
		int elifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ElifOp elif = (ElifOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<ElifOp> l = new LinkedList<ElifOp>(); l.addFirst(elif); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElifList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Elif ::= ELIF Expr THEN StatList 
            {
              ElifOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<StatNode> stats = (LinkedList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElifOp(e, new BodyOp(stats)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Elif",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Else ::= ELSE StatList 
            {
              ElseNode RESULT =null;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<StatNode> stats = (LinkedList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ElseNode(new BodyOp(stats)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Else ::= 
            {
              ElseNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // WhileStat ::= WHILE StatList RETURN Expr DO StatList OD 
            {
              WhileOp RESULT =null;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LinkedList<StatNode> stats = (LinkedList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stats2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stats2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<StatNode> stats2 = (LinkedList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileOp(new BodyOp(stats), e, new BodyOp(stats2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // WhileStat ::= WHILE Expr DO StatList OD 
            {
              WhileOp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int statsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<StatNode> stats = (LinkedList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WhileOp(e, new BodyOp(stats)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // For ::= FOR LPAR VarDecl Expr SEMI AssignStat RPAR VarDecl StatList 
            {
              ForOp RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		VarDeclOp v = (VarDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AssignOp a = (AssignOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclOp var = (VarDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<StatNode> s = (LinkedList<StatNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        LinkedList<VarDeclOp> vars = new LinkedList<VarDeclOp>();   vars.add(var);
        ProcBodyOp b = new ProcBodyOp(vars, s, null);
        RESULT = new ForOp(v, e, a, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("For",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ReadlnStat ::= READ LPAR IdList RPAR 
            {
              ReadOp RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<IdNode> is = (LinkedList<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReadOp(is); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadlnStat",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // WriteStat ::= WRITE LPAR ExprList RPAR 
            {
              WriteOp RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ExprNode> es = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new WriteOp(es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignOp RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<IdNode> is = (LinkedList<IdNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<ExprNode> es = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AssignOp(is, es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CallProc ::= ID LPAR ExprList RPAR 
            {
              CallProcOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<ExprNode> es = (LinkedList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CallProcOp(new IdNode(i),es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallProc",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CallProc ::= ID LPAR RPAR 
            {
              CallProcOp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new CallProcOp(new IdNode(i));    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallProc",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Expr ::= NULL 
            {
              ExprNode RESULT =null;
		 RESULT = new NullConst(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Expr ::= TRUE 
            {
              ExprNode RESULT =null;
		 RESULT = new BooleanConst("TRUE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expr ::= FALSE 
            {
              ExprNode RESULT =null;
		 RESULT = new BooleanConst("FALSE"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Expr ::= INT_CONST 
            {
              ExprNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerConst(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= FLOAT_CONST 
            {
              ExprNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FloatConst(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= STRING_CONST 
            {
              ExprNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringConst(n); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= Expr PLUS Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AddOp(e1,e2);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr MINUS Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SubOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr TIMES Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MultOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr DIV Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DivOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr AND Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AndOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr OR Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new OrOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr GT Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GtOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr GE Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new GeOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr LT Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LtOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr LE Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LeOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr EQ Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EqOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr NE Expr 
            {
              ExprNode RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode e1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NeOp(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= MINUS Expr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MinusOp(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= NOT Expr 
            {
              ExprNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode e = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NotOp(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= ID 
            {
              ExprNode RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdNode(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= CallProc 
            {
              ExprNode RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallProcOp proc = (CallProcOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprCallProc(proc.getId(), proc.getExprs()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
